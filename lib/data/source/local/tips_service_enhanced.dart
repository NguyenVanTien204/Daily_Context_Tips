import 'dart:math';
import '../../models/tip_model.dart';
import '../../models/weather_model.dart';
import '../../../core/services/smart_tip_category_service.dart';
import '../../../core/utils/notification_service.dart';

class TipsService {
  static final TipsService instance = TipsService._init();
  final Random _random = Random();
  final SmartTipCategoryService _smartTipService = SmartTipCategoryService.instance;
  final NotificationService _notificationService = NotificationService.instance;

  TipsService._init();

  // Initialize smart tip service
  Future<void> initialize() async {
    await _smartTipService.loadCategories();
    await _notificationService.initialize();
  }

  // Enhanced smart tip generation with advanced context awareness
  Future<List<TipModel>> generateSmartContextTips({
    WeatherModel? weather,
    bool includeLocation = true,
    bool forceGenerate = false,
  }) async {
    final tips = <TipModel>[];
    final now = DateTime.now();
    final hour = now.hour;

    try {
      // Enhanced smart tip request with comprehensive context
      final smartTips = _smartTipService.getSmartTips(
        hour: hour,
        weatherCondition: weather != null ? _mapWeatherCondition(weather.condition) : null,
        temperature: weather?.temperature.toDouble(),
        humidity: weather?.humidity.toDouble(),
        windSpeed: weather?.windSpeed,
        uvIndex: weather?.uvIndex.toInt(),
      );

      // Generate prioritized tips based on current context
      final priorities = _calculateTipPriorities(hour, weather);

      for (final tipText in smartTips.take(3)) {
        final tipType = _determineTipType(tipText, hour, weather);
        final priority = priorities[tipType] ?? 1;

        tips.add(TipModel(
          title: _generateContextualTitle(tipType, weather),
          content: tipText,
          type: tipType,
          context: _buildEnhancedContext(hour, weather, tipType),
          createdAt: now,
          priority: priority,
        ));
      }

      // Add time-specific enhancement tips
      final timeTip = _generateEnhancedTimeTip(hour, weather);
      if (timeTip != null) {
        tips.add(timeTip);
      }

      // Add weather-specific safety/comfort tips
      if (weather != null) {
        final weatherTips = _generateEnhancedWeatherTips(weather);
        tips.addAll(weatherTips);
      }

    } catch (e) {
      print('‚ùå Error generating smart context tips: $e');
      // Fallback to basic tip
      tips.add(_generateFallbackTip(hour, weather));
    }

    return tips;
  }

  // Instant smart tip trigger for debug/testing
  Future<TipModel> triggerInstantSmartTip({
    WeatherModel? weather,
    bool sendNotification = true,
    String? debugContext,
  }) async {
    final now = DateTime.now();
    final hour = now.hour;

    print('üî• INSTANT SMART TIP TRIGGER:');
    print('‚è∞ Time: ${hour}h (${_getTimeOfDayVietnamese(hour)})');
    if (weather != null) {
      print('üå§Ô∏è Weather: ${weather.condition}, ${weather.temperature.round()}¬∞C, ${weather.humidity.round()}%');
      print('üí® Wind: ${weather.windSpeed.round()}km/h');
      print('‚òÄÔ∏è UV: ${weather.uvIndex.round()}');
    }
    if (debugContext != null) {
      print('üêõ Debug Context: $debugContext');
    }

    // Get most relevant tip for current context
    final smartTips = _smartTipService.getSmartTips(
      hour: hour,
      weatherCondition: weather != null ? _mapWeatherCondition(weather.condition) : null,
      temperature: weather?.temperature.toDouble(),
      humidity: weather?.humidity.toDouble(),
      windSpeed: weather?.windSpeed,
    );

    final selectedTip = smartTips.isNotEmpty ? smartTips.first : _getFallbackMessage(hour);

    print('üí° Selected tip: ${selectedTip.substring(0, selectedTip.length.clamp(0, 50))}...');

    final tip = TipModel(
      title: '‚ö° Instant Smart Tip',
      content: selectedTip,
      type: TipType.contextTime,
      context: _buildEnhancedContext(hour, weather, TipType.contextTime)
        ..addAll({
          'isInstantTrigger': true,
          'debugContext': debugContext,
          'triggerTime': now.toIso8601String(),
        }),
      createdAt: now,
      priority: 3, // High priority for instant tips
    );

    // Send immediate notification if requested
    if (sendNotification) {
      try {
        await _notificationService.showInstantNotification(
          id: now.millisecondsSinceEpoch,
          title: '‚ö° Smart Tip Alert',
          body: selectedTip,
          payload: 'instant_tip_${tip.type.name}',
        );
        print('‚úÖ Notification sent successfully');
      } catch (e) {
        print('‚ùå Error sending notification: $e');
      }
    }

    return tip;
  }

  // Enhanced weather tip priority calculation
  Map<TipType, int> _calculateTipPriorities(int hour, WeatherModel? weather) {
    final priorities = <TipType, int>{
      TipType.daily: 1,
      TipType.contextTime: 2,
      TipType.contextWeather: 1,
      TipType.weatherSpecific: 1,
    };

    // Boost priorities based on context
    if (weather != null) {
      final temp = weather.temperature;
      final humidity = weather.humidity;

      // Extreme weather gets higher priority
      if (temp < 5 || temp > 35) {
        priorities[TipType.contextWeather] = 3;
      }

      if (humidity > 80 || humidity < 30) {
        priorities[TipType.contextWeather] = 3;
      }
    }

    // Work hours get productivity boost
    if (hour >= 8 && hour <= 18) {
      priorities[TipType.daily] = 2;
    }

    // Evening/night gets wellness boost
    if (hour >= 18 || hour <= 6) {
      priorities[TipType.contextTime] = 3;
    }

    return priorities;
  }

  // Enhanced context building
  Map<String, dynamic> _buildEnhancedContext(int hour, WeatherModel? weather, TipType tipType) {
    final context = <String, dynamic>{
      'hour': hour,
      'timeOfDay': _getTimeOfDay(hour),
      'dayOfWeek': DateTime.now().weekday,
      'isWeekend': DateTime.now().weekday >= 6,
      'source': 'enhanced_smart_tip_service',
      'generatedAt': DateTime.now().toIso8601String(),
      'tipType': tipType.name,
    };

    if (weather != null) {
      context.addAll({
        'weather': {
          'temperature': weather.temperature,
          'humidity': weather.humidity,
          'condition': weather.condition,
          'location': weather.location,
          'windSpeed': weather.windSpeed,
          'uvIndex': weather.uvIndex,
          'description': weather.description,
        },
        'weatherCategory': _mapWeatherCondition(weather.condition),
        'isExtremeWeather': _isExtremeWeather(weather),
      });
    }

    return context;
  }

  // Determine tip type based on content and context
  TipType _determineTipType(String tipContent, int hour, WeatherModel? weather) {
    final lowerContent = tipContent.toLowerCase();

    if (weather != null && (lowerContent.contains('th·ªùi ti·∫øt') ||
        lowerContent.contains('nhi·ªát ƒë·ªô') ||
        lowerContent.contains('m∆∞a') ||
        lowerContent.contains('n·∫Øng'))) {
      return TipType.contextWeather;
    }

    if (lowerContent.contains('bu·ªïi') ||
        lowerContent.contains('s√°ng') ||
        lowerContent.contains('chi·ªÅu') ||
        lowerContent.contains('t·ªëi')) {
      return TipType.contextTime;
    }

    return TipType.daily;
  }

  // Generate contextual titles
  String _generateContextualTitle(TipType tipType, WeatherModel? weather) {
    switch (tipType) {
      case TipType.contextWeather:
        if (weather != null) {
          return 'üå§Ô∏è Tips cho ${weather.condition} (${weather.temperature.round()}¬∞C)';
        }
        return 'üå§Ô∏è Tips th·ªùi ti·∫øt';
      case TipType.contextTime:
        return '‚è∞ Tips ${_getTimeOfDayVietnamese(DateTime.now().hour)}';
      case TipType.weatherSpecific:
        return 'üìç Tips th·ªùi ti·∫øt ƒë·∫∑c bi·ªát';
      default:
        return 'üí° Smart Tips';
    }
  }

  // Enhanced time-based tip generation
  TipModel? _generateEnhancedTimeTip(int hour, WeatherModel? weather) {
    try {
      String? timeTip;
      String timeContext = _getTimeOfDay(hour);

      // Context-aware time tips
      if (timeContext == 'morning' && weather != null && weather.temperature < 15) {
        timeTip = 'Bu·ªïi s√°ng l·∫°nh, h√£y m·∫∑c ·∫•m v√† u·ªëng n∆∞·ªõc ·∫•m ƒë·ªÉ kh·ªüi ƒë·ªông ng√†y m·ªõi!';
      } else if (timeContext == 'afternoon' && weather != null && weather.temperature > 30) {
        timeTip = 'Bu·ªïi chi·ªÅu n√≥ng, t√¨m ch·ªó r√¢m m√°t v√† u·ªëng nhi·ªÅu n∆∞·ªõc ƒë·ªÉ gi·ªØ c∆° th·ªÉ m√°t m·∫ª.';
      } else if (timeContext == 'evening') {
        timeTip = 'Bu·ªïi t·ªëi l√† l√∫c th√≠ch h·ª£p ƒë·ªÉ th∆∞ gi√£n v√† chu·∫©n b·ªã cho gi·∫•c ng·ªß ngon.';
      } else if (timeContext == 'night') {
        timeTip = 'ƒê√£ khuya, h√£y t·∫Øt thi·∫øt b·ªã ƒëi·ªán t·ª≠ v√† chu·∫©n b·ªã ngh·ªâ ng∆°i.';
      }

      if (timeTip != null) {
        return TipModel(
          title: '‚è∞ Tips th·ªùi gian th√¥ng minh',
          content: timeTip,
          type: TipType.contextTime,
          context: _buildEnhancedContext(hour, weather, TipType.contextTime),
          createdAt: DateTime.now(),
          priority: 2,
        );
      }
    } catch (e) {
      print('‚ùå Error generating enhanced time tip: $e');
    }
    return null;
  }

  // Enhanced weather tips with safety considerations
  List<TipModel> _generateEnhancedWeatherTips(WeatherModel weather) {
    final tips = <TipModel>[];

    try {
      // Temperature-based tips
      if (weather.temperature > 35) {
        tips.add(TipModel(
          title: 'üå°Ô∏è C·∫£nh b√°o nhi·ªát ƒë·ªô cao',
          content: 'Nhi·ªát ƒë·ªô ${weather.temperature.round()}¬∞C r·∫•t cao! Tr√°nh ra ngo√†i tr∆∞a, u·ªëng nhi·ªÅu n∆∞·ªõc, v√† ·ªü n∆°i m√°t m·∫ª.',
          type: TipType.contextWeather,
          context: _buildEnhancedContext(DateTime.now().hour, weather, TipType.contextWeather),
          createdAt: DateTime.now(),
          priority: 3,
        ));
      } else if (weather.temperature < 5) {
        tips.add(TipModel(
          title: 'üß• C·∫£nh b√°o th·ªùi ti·∫øt l·∫°nh',
          content: 'Nhi·ªát ƒë·ªô ${weather.temperature.round()}¬∞C r·∫•t l·∫°nh! M·∫∑c nhi·ªÅu l·ªõp √°o, ƒëeo gƒÉng tay v√† gi·ªØ ·∫•m c∆° th·ªÉ.',
          type: TipType.contextWeather,
          context: _buildEnhancedContext(DateTime.now().hour, weather, TipType.contextWeather),
          createdAt: DateTime.now(),
          priority: 3,
        ));
      }

      // Humidity-based tips
      if (weather.humidity > 85) {
        tips.add(TipModel(
          title: 'üíß ƒê·ªô ·∫©m cao',
          content: 'ƒê·ªô ·∫©m ${weather.humidity}% r·∫•t cao! S·ª≠ d·ª•ng qu·∫°t, tr√°nh ho·∫°t ƒë·ªông n·∫∑ng, v√† gi·ªØ kh√¥ r√°o.',
          type: TipType.contextWeather,
          context: _buildEnhancedContext(DateTime.now().hour, weather, TipType.contextWeather),
          createdAt: DateTime.now(),
          priority: 2,
        ));
      }

      // Wind-based tips
      if (weather.windSpeed > 15) {
        tips.add(TipModel(
          title: 'üí® Gi√≥ m·∫°nh',
          content: 'Gi√≥ ${weather.windSpeed.round()}km/h kh√° m·∫°nh! C·∫©n th·∫≠n khi di chuy·ªÉn v√† c·ªë ƒë·ªãnh ƒë·ªì v·∫≠t.',
          type: TipType.contextWeather,
          context: _buildEnhancedContext(DateTime.now().hour, weather, TipType.contextWeather),
          createdAt: DateTime.now(),
          priority: 2,
        ));
      }

    } catch (e) {
      print('‚ùå Error generating enhanced weather tips: $e');
    }

    return tips;
  }

  // Utility methods
  bool _isExtremeWeather(WeatherModel weather) {
    return weather.temperature < 5 ||
           weather.temperature > 35 ||
           weather.humidity > 85 ||
           weather.windSpeed > 15;
  }

  String _getTimeOfDayVietnamese(int hour) {
    if (hour >= 6 && hour < 12) return 'bu·ªïi s√°ng';
    if (hour >= 12 && hour < 18) return 'bu·ªïi chi·ªÅu';
    if (hour >= 18 && hour < 22) return 'bu·ªïi t·ªëi';
    return 'ƒë√™m khuya';
  }

  String _getFallbackMessage(int hour) {
    if (hour >= 6 && hour < 12) {
      return 'Ch√†o bu·ªïi s√°ng! H√£y b·∫Øt ƒë·∫ßu ng√†y m·ªõi v·ªõi tinh th·∫ßn t√≠ch c·ª±c.';
    } else if (hour >= 12 && hour < 18) {
      return 'Bu·ªïi chi·ªÅu t·ªët l√†nh! ƒê·ª´ng qu√™n u·ªëng n∆∞·ªõc v√† ngh·ªâ ng∆°i.';
    } else if (hour >= 18 && hour < 23) {
      return 'Bu·ªïi t·ªëi d·ªÖ ch·ªãu! Th·ªùi gian ƒë·ªÉ th∆∞ gi√£n v√† g·∫∑p g·ª° ng∆∞·ªùi th√¢n.';
    } else {
      return 'ƒê√£ khuya r·ªìi! H√£y chu·∫©n b·ªã ngh·ªâ ng∆°i cho m·ªôt gi·∫•c ng·ªß ngon.';
    }
  }

  TipModel _generateFallbackTip(int hour, WeatherModel? weather) {
    return TipModel(
      title: 'üí° Tips c∆° b·∫£n',
      content: _getFallbackMessage(hour),
      type: TipType.daily,
      context: _buildEnhancedContext(hour, weather, TipType.daily),
      createdAt: DateTime.now(),
      priority: 1,
    );
  }

  // Existing methods (backward compatibility)
  TipModel getRandomDailyTip([List<String>? recentTitles]) {
    final tips = _smartTipService.getSmartTips(
      hour: DateTime.now().hour,
      specificCategory: 'health_wellness',
    );

    final selectedTip = tips.isNotEmpty ? tips.first : 'H√£y c√≥ m·ªôt ng√†y t·ªët l√†nh!';

    return TipModel(
      title: 'üí° Tips h·∫±ng ng√†y',
      content: selectedTip,
      type: TipType.daily,
      context: {
        'source': 'smart_tip_service',
        'time': DateTime.now().hour,
      },
      createdAt: DateTime.now(),
      priority: 1,
    );
  }

  List<TipModel> generateWeatherTips(WeatherModel weather) {
    final tips = <TipModel>[];

    try {
      final weatherCondition = _mapWeatherCondition(weather.condition);
      final smartTips = _smartTipService.getSmartTips(
        hour: DateTime.now().hour,
        weatherCondition: weatherCondition,
        temperature: weather.temperature.toDouble(),
        humidity: weather.humidity.toDouble(),
      );

      for (int i = 0; i < smartTips.length && i < 2; i++) {
        tips.add(TipModel(
          title: 'üå§Ô∏è Tips th·ªùi ti·∫øt',
          content: smartTips[i],
          type: TipType.contextWeather,
          context: {
            'temperature': weather.temperature,
            'humidity': weather.humidity,
            'condition': weather.condition,
            'location': weather.location,
            'source': 'smart_tip_service',
          },
          createdAt: DateTime.now(),
          priority: 2,
        ));
      }
    } catch (e) {
      print('Error generating weather tips: $e');
      tips.add(TipModel(
        title: 'üå§Ô∏è Th·ªùi ti·∫øt h√¥m nay',
        content: 'Th·ªùi ti·∫øt ${weather.condition}, ${weather.temperature.round()}¬∞C. H√£y chƒÉm s√≥c s·ª©c kh·ªèe nh√©!',
        type: TipType.contextWeather,
        context: {
          'temperature': weather.temperature,
          'humidity': weather.humidity,
          'condition': weather.condition,
          'location': weather.location,
          'source': 'fallback',
        },
        createdAt: DateTime.now(),
        priority: 2,
      ));
    }

    return tips;
  }

  TipModel? generateTimeTip() {
    try {
      final smartTips = _smartTipService.getSmartTips(
        hour: DateTime.now().hour,
      );

      if (smartTips.isNotEmpty) {
        return TipModel(
          title: '‚è∞ Tips theo th·ªùi gian',
          content: smartTips.first,
          type: TipType.contextTime,
          context: {
            'hour': DateTime.now().hour,
            'timeOfDay': _getTimeOfDay(DateTime.now().hour),
            'source': 'smart_tip_service',
          },
          createdAt: DateTime.now(),
          priority: 2,
        );
      }
    } catch (e) {
      print('Error generating time tip: $e');
    }

    return null;
  }

  TipModel generateMoodTip(String moodGuess) {
    return TipModel(
      title: 'üé≠ Weekly Insight',
      content: moodGuess,
      type: TipType.moodGuess,
      context: {
        'generatedAt': DateTime.now().toIso8601String(),
      },
      createdAt: DateTime.now(),
      priority: 1,
    );
  }

  TipModel generateWeeklyRecapTip(Map<String, dynamic> recap, List<String> challenges) {
    final screenTime = recap['totalScreenTimeHours'] ?? 'N/A';
    final unlocks = recap['totalUnlocks'] ?? 'N/A';
    final moodGuess = recap['moodGuess'] ?? '';

    final randomChallenge = challenges.isNotEmpty
        ? challenges[_random.nextInt(challenges.length)]
        : 'Th·ª≠ d√†nh th·ªùi gian cho b·∫£n th√¢n nhi·ªÅu h∆°n tu·∫ßn t·ªõi! üåü';

    final content = '''
üìä T·ªïng k·∫øt tu·∫ßn:
‚Ä¢ Th·ªùi gian m√†n h√¨nh: ${screenTime}h
‚Ä¢ S·ªë l·∫ßn m·ªü m√°y: $unlocks l·∫ßn

$moodGuess

üí° Th·ª≠ th√°ch tu·∫ßn t·ªõi:
$randomChallenge
''';

    return TipModel(
      title: 'üìà Weekly Recap',
      content: content,
      type: TipType.weekly,
      context: recap,
      createdAt: DateTime.now(),
      priority: 3,
    );
  }

  String _mapWeatherCondition(String condition) {
    final lowerCondition = condition.toLowerCase();
    if (lowerCondition.contains('rain') || lowerCondition.contains('m∆∞a')) {
      return 'rainy';
    } else if (lowerCondition.contains('sun') || lowerCondition.contains('clear')) {
      return 'sunny';
    } else if (lowerCondition.contains('cloud') || lowerCondition.contains('overcast')) {
      return 'cloudy';
    } else {
      return 'clear';
    }
  }

  String _getTimeOfDay(int hour) {
    if (hour >= 6 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 18) return 'afternoon';
    if (hour >= 18 && hour < 22) return 'evening';
    return 'night';
  }

  bool shouldShowTipsToday(List<TipModel> recentTips) {
    final today = DateTime.now();
    final todayTips = recentTips.where((tip) {
      final tipDate = tip.displayedAt ?? tip.createdAt;
      return tipDate.year == today.year &&
             tipDate.month == today.month &&
             tipDate.day == today.day;
    }).toList();

    return todayTips.length < 3; // Max 3 tips per day
  }
}
